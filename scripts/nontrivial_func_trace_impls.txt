glXCreateContext:
    gl_param_pointer(dpy);
    gl_param_pointer(vis);
    gl_param_GLXContext(shareList, -1);
    gl_param_Bool(direct, -1);
    GLXContext result = gl_glXCreateContext(dpy, vis, shareList, direct);
    gl_result_GLXContext(result);

glXChooseVisual:
    gl_param_pointer(dpy);
    gl_param_int(screen, -1);
    int *attribs = attribList;
    while (*attribs != None) ++attribs;
    gl_param_GLuint_array(attribs-attribList+1, attribList);
    XVisualInfo* result = gl_glXChooseVisual(dpy, screen, attribList);
    gl_result_pointer(result);

glXMakeCurrent:
    gl_param_pointer(dpy);
    gl_param_GLXDrawable(drawable, -1);
    gl_param_GLXContext(ctx, -1);
    Bool result = gl_glXMakeCurrent(dpy, drawable, ctx);
    gl_result_Bool(result);
    if (!ctx) {
        current_limits = NULL;
    } else {
        current_limits = &gl21_limits; //TODO
    }

glSetContextCapsWIP15:
    gl_write_b(WIP15_DATA);
    gl_write_u32(34*sizeof(uint32_t)); //TODO: Add variable sized stuff
    #define LIMIT(pname) gl_write_u32(*gl_geti(GL_##pname));
    //TODO: Make LIMITF more portable
    #define LIMITF(pname) fwrite(gl_getf(GL_##pname), 4, 1, trace_file);
    LIMIT(MAX_LIGHTS)
    LIMIT(MAX_CLIP_PLANES)
    LIMIT(MAX_COLOR_MATRIX_STACK_DEPTH)
    LIMIT(MAX_MODELVIEW_STACK_DEPTH)
    LIMIT(MAX_PROJECTION_STACK_DEPTH)
    LIMIT(MAX_TEXTURE_STACK_DEPTH)
    LIMIT(SUBPIXEL_BITS)
    LIMIT(MAX_3D_TEXTURE_SIZE)
    LIMIT(MAX_TEXTURE_SIZE)
    LIMIT(MAX_TEXTURE_LOD_BIAS)
    LIMIT(MAX_CUBE_MAP_TEXTURE_SIZE)
    LIMIT(MAX_PIXEL_MAP_TABLE)
    LIMIT(MAX_NAME_STACK_DEPTH)
    LIMIT(MAX_LIST_NESTING)
    LIMIT(MAX_EVAL_ORDER)
    LIMIT(MAX_ATTRIB_STACK_DEPTH)
    LIMIT(MAX_CLIENT_ATTRIB_STACK_DEPTH)
    //TODO: MAX_COLOR_TABLE_SIZE
    LIMIT(AUX_BUFFERS)
    //TODO: rgba_mode_supported
    //TODO: index_mode_supported
    //TODO: doublebuffer_supported
    //TODO: stereo_supported
    //TODO: ALIASED_POINT_SIZE_RANGE
    //TODO: SMOOTH_POINT_SIZE_RANGE
    LIMITF(SMOOTH_POINT_SIZE_GRANULARITY)
    //TODO: aliased_line_width_range
    //TODO: smooth_line_width_range
    LIMIT(SMOOTH_LINE_WIDTH_GRANULARITY)
    //TODO: max_convolution_width
    //TODO: max_convolution_height
    LIMIT(MAX_ELEMENTS_INDICES)
    LIMIT(MAX_ELEMENTS_VERTICES)
    //TODO: sample_buffers
    //TODO: samples
    LIMIT(NUM_COMPRESSED_TEXTURE_FORMATS)
    //TODO: compressed_texture_formats
    LIMIT(QUERY_COUNTER_BITS)
    //TODO: extensions
    LIMIT(MAX_TEXTURE_UNITS)
    LIMIT(MAX_VERTEX_ATTRIBS)
    LIMIT(MAX_VERTEX_UNIFORM_COMPONENTS)
    LIMIT(MAX_VARYING_FLOATS)
    LIMIT(MAX_COMBINED_TEXTURE_IMAGE_UNITS)
    LIMIT(MAX_VERTEX_TEXTURE_IMAGE_UNITS)
    LIMIT(MAX_TEXTURE_IMAGE_UNITS)
    LIMIT(MAX_TEXTURE_COORDS)
    LIMIT(MAX_FRAGMENT_UNIFORM_COMPONENTS)
    LIMIT(MAX_DRAW_BUFFERS)
    //TODO: *bits_supported
    #undef LIMITF
    #undef LIMIT

glMappedBufferDataWIP15:
    gl_param_GLenum(target, -1);
    gl_param_GLsizei(size, -1);
    gl_param_data(size, data);

glGenTextures:
    gl_param_GLsizei(n, -1);
    gl_glGenTextures(n, textures);
    gl_param_GLuint_array(n, textures);

glDeleteTextures:
    gl_param_GLsizei(n, -1);
    gl_param_GLuint_array(n, textures);
    gl_glDeleteTextures(n, textures);

glTexImage1D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(internalformat, -1); //TODO: The grouop
    gl_param_GLsizei(width, -1);
    gl_param_GLint(border, -1);
    gl_param_GLenum(format, GROUP_PixelFormat);
    gl_param_GLenum(type, GROUP_PixelType);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*texel_size, pixels);
    } else {
        void* data = malloc(width*texel_size);
        gl_param_data(width*texel_size, data);
        free(data);
    }
    
    gl_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);

glTexSubImage1D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(xoffset, -1);
    gl_param_GLsizei(width, -1);
    gl_param_GLenum(format, GROUP_PixelFormat);
    gl_param_GLenum(type, GROUP_PixelType);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*texel_size, pixels);
    } else {
        void* data = malloc(width*texel_size);
        gl_param_data(width*texel_size, data);
        free(data);
    }
    
    gl_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);

glTexImage2D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(internalformat, -1); //TODO: The group
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLint(border, -1);
    gl_param_GLenum(format, GROUP_PixelFormat); 
    gl_param_GLenum(type, GROUP_PixelType);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*height*texel_size, pixels);
    } else {
        void* data = malloc(width*height*texel_size);
        gl_param_data(width*height*texel_size, data);
        free(data);
    }
    
    gl_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);

glTexSubImage2D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(xoffset, -1);
    gl_param_GLint(yoffset, -1);
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLenum(format, GROUP_PixelFormat);
    gl_param_GLenum(type, GROUP_PixelType);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*height*texel_size, pixels);
    } else {
        void* data = malloc(width*height*texel_size);
        gl_param_data(width*height*texel_size, data);
        free(data);
    }
    
    gl_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);

glTexImage3D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(internalformat, -1);
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLsizei(depth, -1);
    gl_param_GLint(border, -1);
    gl_param_GLenum(format, -1);
    gl_param_GLenum(type, -1);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*height*depth*texel_size, pixels);
    } else {
        void* data = malloc(width*height*depth*texel_size);
        gl_param_data(width*height*depth*texel_size, data);
        free(data);
    }
    
    gl_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);

glTexSubImage3D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(xoffset, -1);
    gl_param_GLint(yoffset, -1);
    gl_param_GLint(zoffset, -1);
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLsizei(depth, -1);
    gl_param_GLenum(format, -1);
    gl_param_GLenum(type, -1);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*height*depth*texel_size, pixels);
    } else {
        void* data = malloc(width*height*depth*texel_size);
        gl_param_data(width*height*depth*texel_size, data);
        free(data);
    }
    
    gl_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

glGenBuffers:
    gl_param_GLsizei(n, -1);
    gl_glGenBuffers(n, buffers);
    gl_param_GLuint_array(n, buffers);

glDeleteBuffers:
    gl_param_GLsizei(n, -1);
    gl_param_GLuint_array(n, buffers);
    gl_glDeleteBuffers(n, buffers);

glBufferData:
    gl_param_GLenum(target, -1); //TODO: The group
    gl_param_GLsizeiptr(size, -1);
    
    if (data) {
        gl_param_data(size, data);
    } else {
        void* ptr = malloc(size);
        gl_param_data(size, ptr);
        free(ptr);
    }
    
    gl_param_GLenum(usage, -1); //TODO: The group
    
    gl_glBufferData(target, size, data, usage);

glBufferSubData:
    gl_param_GLenum(target, -1); //TODO: The group
    gl_param_GLintptr(offset, -1);
    gl_param_GLsizeiptr(size, -1);
    gl_param_data(size, data);
    
    gl_glBufferSubData(target, offset, size, data);

glLoadMatrixd:
    gl_param_double_array(16, m);
    gl_glLoadMatrixd(m);

glLoadMatrixf:
    double arr[16];
    for (size_t i = 0; i < 16; ++i) arr[i] = m[i];
    gl_param_double_array(16, arr);
    gl_glLoadMatrixf(m);

glLoadTransposeMatrixd:
    gl_param_double_array(16, m);
    gl_glLoadTransposeMatrixd(m);

glLoadTransposeMatrixf:
    double arr[16];
    for (size_t i = 0; i < 16; ++i) arr[i] = m[i];
    gl_param_double_array(16, arr);
    gl_glLoadTransposeMatrixf(m);

glMultMatrixd:
    gl_param_double_array(16, m);
    gl_glMultMatrixd(m);

glMultMatrixf:
    double arr[16];
    for (size_t i = 0; i < 16; ++i) arr[i] = m[i];
    gl_param_double_array(16, arr);
    gl_glMultMatrixf(m);

glMultTransposeMatrixd:
    gl_param_double_array(16, m);
    gl_glMultTransposeMatrixd(m);

glMultTransposeMatrixf:
    double arr[16];
    for (size_t i = 0; i < 16; ++i) arr[i] = m[i];
    gl_param_double_array(16, arr);
    gl_glMultTransposeMatrixf(m);

glShaderSource:
    gl_param_GLuint(shader, -1);
    gl_param_GLsizei(count, -1);
    if (length) {
        GLchar* sources[count];
        
        for (GLsizei i = 0; i < count; i++) {
            sources[i] = malloc(length[i]+1);
            memcpy(sources[i], string[i], length[i]);
            sources[i][length[i]] = 0;
        }
        
        gl_param_string_array((const GLchar*const*)sources, count);
        
        for (GLsizei i = 0; i < count; i++)
            free(sources[i]);
        
        gl_param_GLuint_array(count, (GLint*)length);
    } else {
        gl_param_string_array(string, count);
        gl_param_GLuint_array(0, NULL);
    }
    gl_glShaderSource(shader, count, string, length);

glAreTexturesResident:
    gl_param_GLsizei(n, -1);
    gl_param_GLuint_array(n, textures);
    gl_param_data(0, NULL);
    GLboolean result = gl_glAreTexturesResident(n, textures, residences);
    gl_result_GLboolean(result);

glPrioritizeTextures:
    gl_param_GLsizei(n, -1);
    gl_param_GLuint_array(n, textures);
    
    double priorities_dbl[n];
    for (GLsizei i = 0; i < n; i++)
        priorities_dbl[i] = priorities[i];    
    gl_param_double_array(n, priorities_dbl);
    gl_glPrioritizeTextures(n, textures, priorities);

glGetBooleanv:
    gl_param_GLenum(pname, GROUP_GetPName);
    gl_param_pointer(data);
    GL_GET(glGetBooleanv)

glGetDoublev:
    gl_param_GLenum(pname, GROUP_GetPName);
    gl_param_pointer(data);
    GL_GET(glGetDoublev)

glGetFloatv:
    gl_param_GLenum(pname, GROUP_GetPName);
    gl_param_pointer(data);
    GL_GET(glGetFloatv)

glGetIntegerv:
    gl_param_GLenum(pname, GROUP_GetPName);
    gl_param_pointer(data);
    GL_GET(glGetIntegerv)

glGetString:
    gl_param_GLenum(name, GROUP_StringName);
    const GLubyte* result = "";
    switch (name) {
    case GL_VENDOR: {
        if (current_limits->vendor.exists)
            result = current_limits->vendor.str;
        else
            result = gl_glGetString(GL_VENDOR);
        break;
    }
    case GL_RENDERER: {
        if (current_limits->renderer.exists)
            result = current_limits->renderer.str;
        else
            result = gl_glGetString(GL_RENDERER);
        break;
    }
    case GL_VERSION: {
        if (current_limits->version.exists)
            result = current_limits->version.str;
        else
            result = gl_glGetString(GL_VERSION);
        break;
    }
    case GL_SHADING_LANGUAGE_VERSION: {
        if (current_limits->shading_language_version.exists)
            result = current_limits->shading_language_version.str;
        else
            result = gl_glGetString(GL_SHADING_LANGUAGE_VERSION);
        break;
    }
    case GL_EXTENSIONS: {
        if (current_limits->extensions.exists)
            result = current_limits->extensions_str;
        else
            result = gl_glGetString(GL_EXTENSIONS);
        break;
    }
    }
    gl_param_string(result);

glCallLists:
    gl_param_GLsizei(n, -1);
    gl_param_GLenum(type, GROUP_ListNameType);
    
    switch (type) {
    case GL_BYTE:
    case GL_UNSIGNED_BYTE:
        gl_param_data(n, lists);
        break;
    case GL_SHORT:
    case GL_UNSIGNED_SHORT:
    case GL_2_BYTES:
        gl_param_data(n * 2, lists);
        break;
    case GL_3_BYTES:
        gl_param_data(n * 3, lists);
        break;
    case GL_INT:
    case GL_UNSIGNED_INT:
    case GL_FLOAT:
    case GL_4_BYTES:
        gl_param_data(n * 4, lists);
        break;
    default:
        gl_param_data(0, lists);
        break;
    }
    
    gl_glCallLists(n, type, lists);

glTexParameterfv:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLenum(pname, GROUP_TextureParameterName);
    
    if (pname == GL_TEXTURE_BORDER_COLOR) {
        double arr[] = {params[0], params[1], params[2], params[3]};
        gl_param_double_array(4, arr);
    } else {
        gl_param_GLfloat(*params, -1);
    }
    
    gl_glTexParameterfv(target, pname, params);

glTexParameteriv:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLenum(pname, GROUP_TextureParameterName);
    
    if (pname == GL_TEXTURE_BORDER_COLOR) {
        gl_param_GLint_array(4, params);
    } else {
        gl_param_GLint(*params, -1);
    }
    
    gl_glTexParameteriv(target, pname, params);

glLightModelfv:
    gl_param_GLenum(pname, GROUP_LightModelParameter);
    
    if (pname == GL_LIGHT_MODEL_AMBIENT) {
        double arr[] = {params[0], params[1], params[2], params[3]};
        gl_param_double_array(4, arr);
    } else {
        gl_param_GLfloat(*params, -1);
    }
    
    gl_glLightModelfv(pname, params);

glLightModeliv:
    gl_param_GLenum(pname, GROUP_LightModelParameter);
    
    if (pname == GL_LIGHT_MODEL_AMBIENT) {
        gl_param_GLint_array(4, params);
    } else {
        gl_param_GLint(*params, -1);
    }
    
    gl_glLightModeliv(pname, params);

glLightfv:
    gl_param_GLenum(light, GROUP_LightName);
    gl_param_GLenum(pname, GROUP_LightParameter);
    
    switch (pname) {
    case GL_AMBIENT:
    case GL_DIFFUSE:
    case GL_SPECULAR:
    case GL_POSITION: {
        double arr[] = {params[0], params[1], params[2], params[3]};
        gl_param_double_array(4, arr);
        break;
    }
    case GL_SPOT_DIRECTION: {
        double arr[] = {params[0], params[1], params[2]};
        gl_param_double_array(3, arr);
        break;
    }
    default: {
        gl_param_GLfloat(*params, -1);
        break;
    }
    }
    
    gl_glLightfv(light, pname, params);

glLightiv:
    gl_param_GLenum(light, GROUP_LightName);
    gl_param_GLenum(pname, GROUP_LightParameter);
    
    switch (pname) {
    case GL_AMBIENT:
    case GL_DIFFUSE:
    case GL_SPECULAR:
    case GL_POSITION: {
        gl_param_GLint_array(4, params);
        break;
    }
    case GL_SPOT_DIRECTION: {
        gl_param_GLint_array(3, params);
        break;
    }
    default: {
        gl_param_GLint(*params, -1);
        break;
    }
    }
    
    gl_glLightiv(light, pname, params);

glMaterialfv:
    gl_param_GLenum(face, GROUP_MaterialFace);
    gl_param_GLenum(pname, GROUP_MaterialParameter);
    
    switch (pname) {
    case GL_AMBIENT:
    case GL_DIFFUSE:
    case GL_SPECULAR:
    case GL_EMISSION:
    case GL_AMBIENT_AND_DIFFUSE: {
        double arr[] = {params[0], params[1], params[2], params[3]};
        gl_param_double_array(4, arr);
        break;
    }
    case GL_COLOR_INDEXES: {
        double arr[] = {params[0], params[1], params[2]};
        gl_param_double_array(3, arr);
        break;
    }
    default: {
        gl_param_GLfloat(*params, -1);
        break;
    }
    }
    
    gl_glMaterialfv(face, pname, params);

glMaterialiv:
    gl_param_GLenum(face, GROUP_MaterialFace);
    gl_param_GLenum(pname, GROUP_MaterialParameter);
    
    switch (pname) {
    case GL_AMBIENT:
    case GL_DIFFUSE:
    case GL_SPECULAR:
    case GL_EMISSION:
    case GL_AMBIENT_AND_DIFFUSE: {
        gl_param_GLint_array(4, params);
        break;
    }
    case GL_COLOR_INDEXES: {
        gl_param_GLint_array(3, params);
        break;
    }
    default: {
        gl_param_GLint(*params, -1);
        break;
    }
    }
    
    gl_glMaterialiv(face, pname, params);

glNormal3bv:
    GLint arr[] = {v[0], v[1], v[2]};
    gl_param_GLint_array(3, arr);
    gl_glNormal3bv(v);

glNormal3dv:
    gl_param_double_array(3, v);
    gl_glNormal3dv(v);

glNormal3fv:
    double arr[] = {v[0], v[1], v[2]};
    gl_param_double_array(3, arr);
    gl_glNormal3fv(v);

glNormal3iv:
    gl_param_GLint_array(3, v);
    gl_glNormal3iv(v);

glNormal3sv:
    GLint arr[] = {v[0], v[1], v[2]};
    gl_param_GLint_array(3, arr);
    gl_glNormal3sv(v);

glVertex2sv:
    GLint arr[] = {v[0], v[1]};
    gl_param_GLint_array(2, arr);
    gl_glVertex2sv(v);

glVertex2iv:
    gl_param_GLint_array(2, v);
    gl_glVertex2iv(v);

glVertex2fv:
    GLdouble arr[] = {v[0], v[1]};
    gl_param_double_array(2, arr);
    gl_glVertex2fv(v);

glVertex2dv:
    gl_param_double_array(2, v);
    gl_glVertex2dv(v);

glVertex3sv:
    GLint arr[] = {v[0], v[1], v[2]};
    gl_param_GLint_array(3, arr);
    gl_glVertex3sv(v);

glVertex3iv:
    gl_param_GLint_array(3, v);
    gl_glVertex3iv(v);

glVertex3fv:
    GLdouble arr[] = {v[0], v[1], v[2]};
    gl_param_double_array(3, arr);
    gl_glVertex3fv(v);

glVertex3dv:
    gl_param_double_array(3, v);
    gl_glVertex3dv(v);

glVertex4sv:
    GLint arr[] = {v[0], v[1], v[2], v[3]};
    gl_param_GLint_array(4, arr);
    gl_glVertex4sv(v);

glVertex4iv:
    gl_param_GLint_array(4, v);
    gl_glVertex4iv(v);

glVertex4fv:
    GLdouble arr[] = {v[0], v[1], v[2], v[3]};
    gl_param_double_array(4, arr);
    gl_glVertex4fv(v);

glVertex4dv:
    gl_param_double_array(4, v);
    gl_glVertex4dv(v);

glTexCoord1sv:
    gl_param_GLshort(*v, -1);
    gl_glTexCoord1sv(v);

glTexCoord1iv:
    gl_param_GLint(*v, -1);
    gl_glTexCoord1iv(v);

glTexCoord1fv:
    gl_param_GLfloat(*v, -1);
    gl_glTexCoord1fv(v);

glTexCoord1dv:
    gl_param_GLdouble(*v, -1);
    gl_glTexCoord1dv(v);

glTexCoord2sv:
    GLint arr[] = {v[0], v[1]};
    gl_param_GLint_array(2, arr);
    gl_glTexCoord2sv(v);

glTexCoord2iv:
    gl_param_GLint_array(2, v);
    gl_glTexCoord2iv(v);

glTexCoord2fv:
    double arr[] = {v[0], v[1]};
    gl_param_double_array(2, arr);
    gl_glTexCoord2fv(v);

glTexCoord2dv:
    gl_param_double_array(2, v);
    gl_glTexCoord2dv(v);

glTexCoord3sv:
    GLint arr[] = {v[0], v[1], v[2]};
    gl_param_GLint_array(3, arr);
    gl_glTexCoord3sv(v);

glTexCoord3iv:
    gl_param_GLint_array(3, v);
    gl_glTexCoord3iv(v);

glTexCoord3fv:
    double arr[] = {v[0], v[1], v[2]};
    gl_param_double_array(3, arr);
    gl_glTexCoord3fv(v);

glTexCoord3dv:
    gl_param_double_array(3, v);
    gl_glTexCoord3dv(v);

glTexCoord4sv:
    GLint arr[] = {v[0], v[1], v[2], v[3]};
    gl_param_GLint_array(4, arr);
    gl_glTexCoord4sv(v);

glTexCoord4iv:
    gl_param_GLint_array(4, v);
    gl_glTexCoord4iv(v);

glTexCoord4fv:
    double arr[] = {v[0], v[1], v[2], v[3]};
    gl_param_double_array(4, arr);
    gl_glTexCoord4fv(v);

glTexCoord4dv:
    gl_param_double_array(4, v);
    gl_glTexCoord4dv(v);

glIndexsv:
    gl_param_GLshort(*c, -1);
    gl_glIndexsv(c);

glIndexiv:
    gl_param_GLint(*c, -1);
    gl_glIndexiv(c);

glIndexfv:
    gl_param_GLfloat(*c, -1);
    gl_glIndexfv(c);

glIndexdv:
    gl_param_GLdouble(*c, -1);
    gl_glIndexdv(c);

glIndexubv:
    gl_param_GLubyte(*c, -1);
    gl_glIndexubv(c);

glFogCoorddv:
    gl_param_GLdouble(*coord, -1);
    gl_glFogCoorddv(coord);

glFogCoordfv:
    gl_param_GLfloat(*coord, -1);
    gl_glFogCoordfv(coord);

glEdgeFlagv:
    gl_param_GLboolean(*flag, -1);
    gl_glEdgeFlagv(flag);

glColor3bv:
    GLint arr[] = {v[0], v[1], v[2]};
    gl_param_GLint_array(3, arr);
    gl_glColor3bv(v);

glColor3sv:
    GLint arr[] = {v[0], v[1], v[2]};
    gl_param_GLint_array(3, arr);
    gl_glColor3sv(v);

glColor3iv:
    gl_param_GLint_array(3, v);
    gl_glColor3iv(v);

glColor3fv:
    double arr[] = {v[0], v[1], v[2]};
    gl_param_double_array(3, arr);
    gl_glColor3fv(v);

glColor3dv:
    gl_param_double_array(3, v);
    gl_glColor3dv(v);

glColor3ubv:
    GLint arr[] = {v[0], v[1], v[2]};
    gl_param_GLint_array(3, arr);
    gl_glColor3ubv(v);

glColor3usv:
    GLint arr[] = {v[0], v[1], v[2]};
    gl_param_GLint_array(3, arr);
    gl_glColor3usv(v);

glColor3uiv:
    gl_param_GLuint_array(3, v);
    gl_glColor3uiv(v);

glColor4bv:
    GLint arr[] = {v[0], v[1], v[2], v[3]};
    gl_param_GLint_array(4, arr);
    gl_glColor4bv(v);

glColor4sv:
    GLint arr[] = {v[0], v[1], v[2], v[3]};
    gl_param_GLint_array(4, arr);
    gl_glColor4sv(v);

glColor4iv:
    gl_param_GLint_array(4, v);
    gl_glColor4iv(v);

glColor4fv:
    double arr[] = {v[0], v[1], v[2], v[3]};
    gl_param_double_array(4, arr);
    gl_glColor4fv(v);

glColor4dv:
    gl_param_double_array(4, v);
    gl_glColor4dv(v);

glColor4ubv:
    GLint arr[] = {v[0], v[1], v[2], v[3]};
    gl_param_GLint_array(4, arr);
    gl_glColor4ubv(v);

glColor4usv:
    GLint arr[] = {v[0], v[1], v[2], v[3]};
    gl_param_GLint_array(4, arr);
    gl_glColor4usv(v);

glColor4uiv:
    gl_param_GLuint_array(4, v);
    gl_glColor4uiv(v);

glRectdv:
    gl_param_double_array(2, v1);
    gl_param_double_array(2, v2);
    gl_glRectdv(v1, v2);

glRectfv:
    GLdouble arr1[] = {v1[0], v1[1]};
    gl_param_double_array(2, arr1);
    GLdouble arr2[] = {v2[0], v2[1]};
    gl_param_double_array(2, arr2);
    gl_glRectfv(v1, v2);

glRectiv:
    gl_param_GLint_array(2, v1);
    gl_param_GLint_array(2, v2);
    gl_glRectiv(v1, v2);

glRectsv:
    GLint arr1[] = {v1[0], v1[1]};
    gl_param_GLint_array(2, arr1);
    GLint arr2[] = {v2[0], v2[1]};
    gl_param_GLint_array(2, arr2);
    gl_glRectsv(v1, v2);

glProgramUniformWIP15:
    gl_param_GLuint(program, -1);
    gl_param_string(name);
    gl_param_GLuint(location, -1);

glUniform1fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLfloat_array(count, value);
    gl_glUniform1fv(location, count, value);

glUniform2fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLfloat_array(count*2, value);
    gl_glUniform2fv(location, count, value);

glUniform3fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLfloat_array(count*3, value);
    gl_glUniform3fv(location, count, value);

glUniform4fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLfloat_array(count*4, value);
    gl_glUniform4fv(location, count, value);

glUniform1iv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLint_array(count, value);
    gl_glUniform1iv(location, count, value);

glUniform2iv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLint_array(count*2, value);
    gl_glUniform2iv(location, count, value);

glUniform3iv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLint_array(count*3, value);
    gl_glUniform3iv(location, count, value);

glUniform4iv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLint_array(count*4, value);
    gl_glUniform4iv(location, count, value);

glUniformMatrix2fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose,-1);
    gl_param_GLfloat_array(count*4, value);
    gl_glUniformMatrix2fv(location, count, transpose, value);

glUniformMatrix3fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*9, value);
    gl_glUniformMatrix3fv(location, count, transpose, value);

glUniformMatrix4fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*16, value);
    gl_glUniformMatrix4fv(location, count, transpose, value);

glUniformMatrix2x3fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*6, value);
    gl_glUniformMatrix2x3fv(location, count, transpose, value);

glUniformMatrix3x2fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*6, value);
    gl_glUniformMatrix3x2fv(location, count, transpose, value);

glUniformMatrix2x4fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*8, value);
    gl_glUniformMatrix2x4fv(location, count, transpose, value);

glUniformMatrix4x2fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*8, value);
    gl_glUniformMatrix4x2fv(location, count, transpose, value);

glUniformMatrix3x4fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*12, value);
    gl_glUniformMatrix3x4fv(location, count, transpose, value);

glUniformMatrix4x3fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*12, value);
    gl_glUniformMatrix4x3fv(location, count, transpose, value);

glProgramAttribWIP15:
    gl_param_GLuint(program, -1);
    gl_param_string(name);
    gl_param_GLuint(index, -1);

glClientColorDataWIP15:
    gl_param_GLsizei(size, -1);
    gl_param_data(size, data);

glClientEdgeFlagDataWIP15:
    gl_param_GLsizei(size, -1);
    gl_param_data(size, data);

glClientFogCoordDataWIP15:
    gl_param_GLsizei(size, -1);
    gl_param_data(size, data);

glClientIndexDataWIP15:
    gl_param_GLsizei(size, -1);
    gl_param_data(size, data);

glClientNormalDataWIP15:
    gl_param_GLsizei(size, -1);
    gl_param_data(size, data);

glClientSecondaryColorDataWIP15:
    gl_param_GLsizei(size, -1);
    gl_param_data(size, data);

glClientTextureCoordDataWIP15:
    gl_param_GLsizei(size, -1);
    gl_param_data(size, data);

glClientVertexDataWIP15:
    gl_param_GLsizei(size, -1);
    gl_param_data(size, data);

glClientGenericAttribDataWIP15:
    gl_param_GLuint(index, -1);
    gl_param_GLsizei(size, -1);
    gl_param_data(size, data);

glPointParameterfv:
    gl_param_GLenum(pname, -1);
    if (pname == GL_POINT_DISTANCE_ATTENUATION)
        gl_param_GLfloat_array(3, params);
    else
        gl_param_GLfloat_array(1, params);
    gl_glPointParameterfv(pname, params);

glPointParameteriv:
    gl_param_GLenum(pname, -1);
    if (pname == GL_POINT_DISTANCE_ATTENUATION)
        gl_param_GLint_array(3, params);
    else
        gl_param_GLint_array(1, params);
    gl_glPointParameteriv(pname, params);

glClipPlane:
    gl_param_GLenum(plane, GROUP_ClipPlaneName);
    gl_param_double_array(4, equation);
    gl_glClipPlane(plane, equation);

glTexEnvfv:
    gl_param_GLenum(target, GROUP_TextureEnvTarget);
    gl_param_GLenum(pname, GROUP_TextureEnvParameter);
    if (pname == GL_TEXTURE_ENV_COLOR)
        gl_param_GLfloat_array(4, params);
    else
        gl_param_GLfloat_array(1, params);
    gl_glTexEnvfv(target, pname, params);

glTexEnviv:
    gl_param_GLenum(target, GROUP_TextureEnvTarget);
    gl_param_GLenum(pname, GROUP_TextureEnvParameter);
    if (pname == GL_TEXTURE_ENV_COLOR)
        gl_param_GLint_array(4, params);
    else
        gl_param_GLint_array(1, params);
    gl_glTexEnviv(target, pname, params);

glTexGeniv:
    gl_param_GLenum(coord, GROUP_TextureCoordName);
    gl_param_GLenum(pname, GROUP_TextureGenParameter);
    if (pname == GL_TEXTURE_GEN_MODE)
        gl_param_GLint_array(1, params);
    else
        gl_param_GLint_array(4, params);

glTexGenfv:
    gl_param_GLenum(coord, GROUP_TextureCoordName);
    gl_param_GLenum(pname, GROUP_TextureGenParameter);
    if (pname == GL_TEXTURE_GEN_MODE)
        gl_param_GLfloat_array(1, params);
    else
        gl_param_GLfloat_array(4, params);

glTexGendv:
    gl_param_GLenum(coord, GROUP_TextureCoordName);
    gl_param_GLenum(pname, GROUP_TextureGenParameter);
    if (pname == GL_TEXTURE_GEN_MODE)
        gl_param_double_array(1, params);
    else
        gl_param_double_array(4, params);

glWindowPos2sv:
    GLint arr[] = {v[0], v[1]};
    gl_param_GLint_array(2, arr);
    gl_glWindowPos2sv(v);

glWindowPos2iv:
    gl_param_GLint_array(2, v);
    gl_glWindowPos2iv(v);

glWindowPos2fv:
    gl_param_GLfloat_array(2, v);
    gl_glWindowPos2fv(v);

glWindowPos2dv:
    gl_param_double_array(2, v);
    gl_glWindowPos2dv(v);

glWindowPos3sv:
    GLint arr[] = {v[0], v[1], v[2]};
    gl_param_GLint_array(3, arr);
    gl_glWindowPos3sv(v);

glWindowPos3iv:
    gl_param_GLint_array(3, v);
    gl_glWindowPos3iv(v);

glWindowPos3fv:
    gl_param_GLfloat_array(3, v);
    gl_glWindowPos3fv(v);

glWindowPos3dv:
    gl_param_double_array(3, v);
    gl_glWindowPos3dv(v);

glRasterPos2sv:
    GLint arr[] = {v[0], v[1]};
    gl_param_GLint_array(2, arr);
    gl_glRasterPos2sv(v);

glRasterPos2iv:
    gl_param_GLint_array(2, v);
    gl_glRasterPos2iv(v);

glRasterPos2fv:
    gl_param_GLfloat_array(2, v);
    gl_glRasterPos2fv(v);

glRasterPos2dv:
    gl_param_double_array(2, v);
    gl_glRasterPos2dv(v);

glRasterPos3sv:
    GLint arr[] = {v[0], v[1], v[2]};
    gl_param_GLint_array(3, arr);
    gl_glRasterPos3sv(v);

glRasterPos3iv:
    gl_param_GLint_array(3, v);
    gl_glRasterPos3iv(v);

glRasterPos3fv:
    gl_param_GLfloat_array(3, v);
    gl_glRasterPos3fv(v);

glRasterPos3dv:
    gl_param_double_array(3, v);
    gl_glRasterPos3dv(v);

glRasterPos4sv:
    GLint arr[] = {v[0], v[1], v[2], v[3]};
    gl_param_GLint_array(4, arr);
    gl_glRasterPos4sv(v);

glRasterPos4iv:
    gl_param_GLint_array(4, v);
    gl_glRasterPos4iv(v);

glRasterPos4fv:
    gl_param_GLfloat_array(4, v);
    gl_glRasterPos4fv(v);

glRasterPos4dv:
    gl_param_double_array(4, v);
    gl_glRasterPos4dv(v);
