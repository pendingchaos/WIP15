glXChooseVisual:
    gl_param_pointer(dpy);
    gl_param_int(screen, -1);
    size_t count = 0;
    while (attribList[count]) count += 2;
    gl_param_GLuint_array(count+1, attribList);
    XVisualInfo* result = gl_glXChooseVisual(dpy, screen, attribList);
    gl_result_pointer(result);

glXMakeCurrent:
    gl_param_pointer(dpy);
    gl_param_GLXDrawable(drawable, -1);
    gl_param_GLXContext(ctx, -1);
    Bool result = gl_glXMakeCurrent(dpy, drawable, ctx);
    gl_result_Bool(result);
    if (!ctx) {
        current_limits = NULL;
    } else {
        current_limits = &gl30_limits; //TODO
    }
    reset_gl();

glXCreateContextAttribsARB:
    gl_param_pointer(dpy);
    gl_param_GLXFBConfig(config, -1);
    gl_param_GLXContext(share_context, -1);
    gl_param_Bool(direct, -1);
    size_t count = 0;
    while (attrib_list[count]) count += 2;
    gl_param_GLint_array(count+1, attrib_list);
    GLXContext result = gl_glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list);
    gl_result_GLXContext(result);

glSetContextCapsWIP15:
    //TODO
    /*gl_write_b(WIP15_DATA);
    gl_write_u32(0*sizeof(uint32_t));
    #define LIMIT(pname) gl_write_u32(*gl_geti(GL_##pname));
    //TODO: Make LIMITF more portable
    #define LIMITF(pname) fwrite(gl_getf(GL_##pname), 4, 1, trace_file);
    //TODO: *bits_supported
    #undef LIMITF
    #undef LIMIT*/

glMappedBufferDataWIP15:
    gl_param_GLenum(target, -1);
    gl_param_GLsizei(size, -1);
    gl_param_data(size, data);

glGenTextures:
    gl_param_GLsizei(n, -1);
    gl_glGenTextures(n, textures);
    gl_param_GLuint_array(n, textures);

glDeleteTextures:
    gl_param_GLsizei(n, -1);
    gl_param_GLuint_array(n, textures);
    gl_glDeleteTextures(n, textures);

glTexImage1D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(internalformat, -1); //TODO: The grouop
    gl_param_GLsizei(width, -1);
    gl_param_GLint(border, -1);
    gl_param_GLenum(format, GROUP_PixelFormat);
    gl_param_GLenum(type, GROUP_PixelType);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*texel_size, pixels);
    } else {
        void* data = malloc(width*texel_size);
        gl_param_data(width*texel_size, data);
        free(data);
    }
    
    gl_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);

glTexSubImage1D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(xoffset, -1);
    gl_param_GLsizei(width, -1);
    gl_param_GLenum(format, GROUP_PixelFormat);
    gl_param_GLenum(type, GROUP_PixelType);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*texel_size, pixels);
    } else {
        void* data = malloc(width*texel_size);
        gl_param_data(width*texel_size, data);
        free(data);
    }
    
    gl_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);

glTexImage2D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(internalformat, -1); //TODO: The group
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLint(border, -1);
    gl_param_GLenum(format, GROUP_PixelFormat); 
    gl_param_GLenum(type, GROUP_PixelType);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*height*texel_size, pixels);
    } else {
        void* data = malloc(width*height*texel_size);
        gl_param_data(width*height*texel_size, data);
        free(data);
    }
    
    gl_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);

glTexSubImage2D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(xoffset, -1);
    gl_param_GLint(yoffset, -1);
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLenum(format, GROUP_PixelFormat);
    gl_param_GLenum(type, GROUP_PixelType);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*height*texel_size, pixels);
    } else {
        void* data = malloc(width*height*texel_size);
        gl_param_data(width*height*texel_size, data);
        free(data);
    }
    
    gl_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);

glTexImage3D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(internalformat, -1);
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLsizei(depth, -1);
    gl_param_GLint(border, -1);
    gl_param_GLenum(format, -1);
    gl_param_GLenum(type, -1);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*height*depth*texel_size, pixels);
    } else {
        void* data = malloc(width*height*depth*texel_size);
        gl_param_data(width*height*depth*texel_size, data);
        free(data);
    }
    
    gl_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);

glTexSubImage3D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(xoffset, -1);
    gl_param_GLint(yoffset, -1);
    gl_param_GLint(zoffset, -1);
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLsizei(depth, -1);
    gl_param_GLenum(format, -1);
    gl_param_GLenum(type, -1);
    
    size_t texel_size = get_texel_size(format, type);
    if (pixels) {
        gl_param_data(width*height*depth*texel_size, pixels);
    } else {
        void* data = malloc(width*height*depth*texel_size);
        gl_param_data(width*height*depth*texel_size, data);
        free(data);
    }
    
    gl_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

glCompressedTexImage1D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLenum(internalformat, GROUP_PixelFormat);
    gl_param_GLsizei(width, -1);
    gl_param_GLint(border, -1);
    gl_param_GLsizei(imageSize, -1);
    gl_param_data(imageSize, data);
    gl_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);

glCompressedTexSubImage1D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(xoffset, -1);
    gl_param_GLsizei(width, -1);
    gl_param_GLenum(format, GROUP_PixelFormat);
    gl_param_GLsizei(imageSize, -1);
    gl_param_data(imageSize, data);
    gl_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);

glCompressedTexImage2D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLenum(internalformat, GROUP_PixelFormat);
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLint(border, -1);
    gl_param_GLsizei(imageSize, -1);
    gl_param_data(imageSize, data);
    gl_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);

glCompressedTexSubImage2D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(xoffset, -1);
    gl_param_GLint(yoffset, -1);
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLenum(format, GROUP_PixelFormat);
    gl_param_GLsizei(imageSize, -1);
    gl_param_data(imageSize, data);
    gl_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);

glCompressedTexImage3D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLenum(internalformat, GROUP_PixelFormat);
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLsizei(depth, -1);
    gl_param_GLint(border, -1);
    gl_param_GLsizei(imageSize, -1);
    gl_param_data(imageSize, data);
    gl_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);

glCompressedTexSubImage3D:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLint(level, -1);
    gl_param_GLint(xoffset, -1);
    gl_param_GLint(yoffset, -1);
    gl_param_GLint(zoffset, -1);
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);
    gl_param_GLsizei(depth, -1);
    gl_param_GLenum(format, GROUP_PixelFormat);
    gl_param_GLsizei(imageSize, -1);
    gl_param_data(imageSize, data);
    gl_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

glGenBuffers:
    gl_param_GLsizei(n, -1);
    gl_glGenBuffers(n, buffers);
    gl_param_GLuint_array(n, buffers);

glDeleteBuffers:
    gl_param_GLsizei(n, -1);
    gl_param_GLuint_array(n, buffers);
    gl_glDeleteBuffers(n, buffers);

glBufferData:
    gl_param_GLenum(target, -1); //TODO: The group
    gl_param_GLsizeiptr(size, -1);
    
    if (data) {
        gl_param_data(size, data);
    } else {
        void* ptr = malloc(size);
        gl_param_data(size, ptr);
        free(ptr);
    }
    
    gl_param_GLenum(usage, -1); //TODO: The group
    
    gl_glBufferData(target, size, data, usage);

glBufferSubData:
    gl_param_GLenum(target, -1); //TODO: The group
    gl_param_GLintptr(offset, -1);
    gl_param_GLsizeiptr(size, -1);
    gl_param_data(size, data);
    
    gl_glBufferSubData(target, offset, size, data);

glShaderSource:
    gl_param_GLuint(shader, -1);
    gl_param_GLsizei(count, -1);
    if (length) {
        GLchar* sources[count];
        
        for (GLsizei i = 0; i < count; i++) {
            sources[i] = malloc(length[i]+1);
            memcpy(sources[i], string[i], length[i]);
            sources[i][length[i]] = 0;
        }
        
        gl_param_string_array((const GLchar*const*)sources, count);
        
        for (GLsizei i = 0; i < count; i++)
            free(sources[i]);
        
        gl_param_GLuint_array(count, (GLint*)length);
    } else {
        gl_param_string_array(string, count);
        gl_param_GLuint_array(0, NULL);
    }
    gl_glShaderSource(shader, count, string, length);

glGetBooleanv:
    gl_param_GLenum(pname, GROUP_GetPName);
    gl_param_pointer(data);
    GL_GET(glGetBooleanv)

glGetDoublev:
    gl_param_GLenum(pname, GROUP_GetPName);
    gl_param_pointer(data);
    GL_GET(glGetDoublev)

glGetFloatv:
    gl_param_GLenum(pname, GROUP_GetPName);
    gl_param_pointer(data);
    GL_GET(glGetFloatv)

glGetIntegerv:
    gl_param_GLenum(pname, GROUP_GetPName);
    gl_param_pointer(data);
    GL_GET(glGetIntegerv)

glGetString:
    gl_param_GLenum(name, GROUP_StringName);
    const GLubyte* result = "";
    switch (name) {
    case GL_VENDOR:
        if (current_limits->vendor.exists)
            result = current_limits->vendor.str;
        else
            result = gl_glGetString(GL_VENDOR);
        break;
    case GL_RENDERER:
        if (current_limits->renderer.exists)
            result = current_limits->renderer.str;
        else
            result = gl_glGetString(GL_RENDERER);
        break;
    case GL_VERSION:
        if (current_limits->version.exists)
            result = current_limits->version.str;
        else
            result = gl_glGetString(GL_VERSION);
        break;
    case GL_SHADING_LANGUAGE_VERSION:
        if (current_limits->shading_language_version.exists)
            result = current_limits->shading_language_version.str;
        else
            result = gl_glGetString(GL_SHADING_LANGUAGE_VERSION);
        break;
    case GL_EXTENSIONS:
        if (current_limits->extensions.exists)
            result = current_limits->extensions_str;
        else
            result = gl_glGetString(GL_EXTENSIONS);
        break;
    }
    gl_param_string(result);

glTexParameterfv:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLenum(pname, GROUP_TextureParameterName);
    
    if (pname == GL_TEXTURE_BORDER_COLOR) {
        double arr[] = {params[0], params[1], params[2], params[3]};
        gl_param_double_array(4, arr);
    } else {
        gl_param_GLfloat(*params, -1);
    }
    
    gl_glTexParameterfv(target, pname, params);

glTexParameteriv:
    gl_param_GLenum(target, GROUP_TextureTarget);
    gl_param_GLenum(pname, GROUP_TextureParameterName);
    
    if (pname == GL_TEXTURE_BORDER_COLOR) {
        gl_param_GLint_array(4, params);
    } else {
        gl_param_GLint(*params, -1);
    }
    
    gl_glTexParameteriv(target, pname, params);

glProgramUniformWIP15:
    gl_param_GLuint(program, -1);
    gl_param_string(name);
    gl_param_GLuint(location, -1);

glUniform1fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLfloat_array(count, value);
    gl_glUniform1fv(location, count, value);

glUniform2fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLfloat_array(count*2, value);
    gl_glUniform2fv(location, count, value);

glUniform3fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLfloat_array(count*3, value);
    gl_glUniform3fv(location, count, value);

glUniform4fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLfloat_array(count*4, value);
    gl_glUniform4fv(location, count, value);

glUniform1iv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLint_array(count, value);
    gl_glUniform1iv(location, count, value);

glUniform2iv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLint_array(count*2, value);
    gl_glUniform2iv(location, count, value);

glUniform3iv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLint_array(count*3, value);
    gl_glUniform3iv(location, count, value);

glUniform4iv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLint_array(count*4, value);
    gl_glUniform4iv(location, count, value);

glUniform1uiv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLuint_array(count, value);
    gl_glUniform1uiv(location, count, value);

glUniform2uiv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLuint_array(count*2, value);
    gl_glUniform2uiv(location, count, value);

glUniform3uiv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLuint_array(count*3, value);
    gl_glUniform3uiv(location, count, value);

glUniform4uiv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLuint_array(count*4, value);
    gl_glUniform4uiv(location, count, value);

glUniformMatrix2fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose,-1);
    gl_param_GLfloat_array(count*4, value);
    gl_glUniformMatrix2fv(location, count, transpose, value);

glUniformMatrix3fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*9, value);
    gl_glUniformMatrix3fv(location, count, transpose, value);

glUniformMatrix4fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*16, value);
    gl_glUniformMatrix4fv(location, count, transpose, value);

glUniformMatrix2x3fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*6, value);
    gl_glUniformMatrix2x3fv(location, count, transpose, value);

glUniformMatrix3x2fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*6, value);
    gl_glUniformMatrix3x2fv(location, count, transpose, value);

glUniformMatrix2x4fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*8, value);
    gl_glUniformMatrix2x4fv(location, count, transpose, value);

glUniformMatrix4x2fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*8, value);
    gl_glUniformMatrix4x2fv(location, count, transpose, value);

glUniformMatrix3x4fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*12, value);
    gl_glUniformMatrix3x4fv(location, count, transpose, value);

glUniformMatrix4x3fv:
    gl_param_GLint(location, -1);
    gl_param_GLsizei(count, -1);
    gl_param_GLboolean(transpose, -1);
    gl_param_GLfloat_array(count*12, value);
    gl_glUniformMatrix4x3fv(location, count, transpose, value);

glProgramAttribWIP15:
    gl_param_GLuint(program, -1);
    gl_param_string(name);
    gl_param_GLuint(index, -1);

glTestFBWIP15:
    gl_param_string(name);
    gl_param_data(100*100*4, color);
    gl_param_data(100*100*4, depth);

glCurrentTestWIP15:
    gl_param_string(name);

glGenVertexArrays:
    gl_param_GLsizei(n, -1);
    gl_glGenVertexArrays(n, arrays);
    gl_param_GLuint_array(n, arrays);

glDeleteVertexArrays:
    gl_param_GLsizei(n, -1);
    gl_param_GLuint_array(n, arrays);
    gl_glDeleteVertexArrays(n, arrays);

glPatchParameterfv:
    gl_param_GLenum(pname, -1); //TODO: The group
    switch (pname) {
    case GL_PATCH_VERTICES:
        gl_param_GLfloat_array(1, values);
        break;
    case GL_PATCH_DEFAULT_OUTER_LEVEL:
        gl_param_GLfloat_array(4, values);
        break;
    case GL_PATCH_DEFAULT_INNER_LEVEL:
        gl_param_GLfloat_array(2, values);
        break;
    }
    gl_glPatchParameterfv(pname, values);

glDrawableSizeWIP15:
    gl_param_GLsizei(width, -1);
    gl_param_GLsizei(height, -1);

glGetBufferParameteriv:
    gl_glGetBufferParameteriv(target, pname, params);
    gl_param_GLenum(target, -1); //TODO: The group
    gl_param_GLenum(pname, -1); //TODO: The group
    gl_param_GLint(*params, -1);

glGetBufferPointerv:
    gl_glGetBufferPointerv(target, pname, params);
    gl_param_GLenum(target, -1); //TODO: The group
    gl_param_GLenum(pname, -1); //TODO: The group
    gl_param_pointer(*params);

glGenSamplers:
    gl_param_GLsizei(count, -1);
    gl_glGenSamplers(count, samplers);
    gl_param_GLuint_array(count, samplers);

glDeleteSamplers:
    gl_param_GLsizei(count, -1);
    gl_param_GLuint_array(count, samplers);
    gl_glDeleteSamplers(count, samplers);

glPointParameterfv:
    gl_param_GLenum(pname, -1); //TODO: The group
    gl_param_GLfloat(*params, -1);
    gl_glPointParameterfv(pname, params);

glPointParameteriv:
    gl_param_GLenum(pname, -1); //TODO: The group
    gl_param_GLint(*params, -1);
    gl_glPointParameteriv(pname, params);

glGetSynciv:
    GLsizei len;
    gl_glGetSynciv(sync, pname, bufSize, length?length:&len, values);
    
    gl_param_GLsync(sync, -1);
    gl_param_GLenum(pname, -1);
    gl_param_GLsizei(bufSize, -1);
    if (length) {
        gl_param_GLsizei(*length, -1);
        gl_param_GLint_array(*length, values);
    } else {
        gl_param_GLint_array(0, NULL);
        gl_param_GLint_array(len, values);
    }

glMultiDrawArrays:
    gl_param_GLenum(mode, GROUP_PrimitiveType);
    gl_param_GLint_array(drawcount, first);
    gl_param_GLint_array(drawcount, count);
    gl_param_GLsizei(drawcount, -1);
    gl_glMultiDrawArrays(mode, first, count, drawcount);

glMultiDrawElements:
    gl_param_GLenum(mode, GROUP_PrimitiveType);
    gl_param_GLint_array(drawcount, count);
    gl_param_GLenum(type, -1); //TODO: The group
    gl_param_pointer_array(drawcount, indices);
    gl_param_GLsizei(drawcount, -1);
    gl_glMultiDrawElements(mode, count, type, indices, drawcount);

glMultiDrawElementsBaseVertex:
    gl_param_GLenum(mode, GROUP_PrimitiveType);
    gl_param_GLint_array(drawcount, count);
    gl_param_GLenum(type, -1); //TODO: The group
    gl_param_pointer_array(drawcount, indices);
    gl_param_GLsizei(drawcount, -1);
    gl_param_GLint_array(drawcount, basevertex);
    gl_glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);

glSamplerParameterfv:
    gl_glSamplerParameterfv(sampler, pname, param);
    gl_param_GLuint(sampler, -1);
    gl_param_GLenum(pname, -1); //TODO: The group
    if (pname == GL_TEXTURE_BORDER_COLOR)
        gl_param_GLfloat_array(4, param);
    else
        gl_param_GLfloat(*param, -1);

glSamplerParameteriv:
    gl_glSamplerParameteriv(sampler, pname, param);
    gl_param_GLuint(sampler, -1);
    gl_param_GLenum(pname, -1); //TODO: The group
    if (pname == GL_TEXTURE_BORDER_COLOR)
        gl_param_GLint_array(4, param);
    else
        gl_param_GLint(*param, -1);

glSamplerParameterIiv:
    gl_glSamplerParameterIiv(sampler, pname, param);
    gl_param_GLuint(sampler, -1);
    gl_param_GLenum(pname, -1); //TODO: The group
    if (pname == GL_TEXTURE_BORDER_COLOR)
        gl_param_GLint_array(4, param);
    else
        gl_param_GLint(*param, -1);

glSamplerParameterIuiv:
    gl_glSamplerParameterIuiv(sampler, pname, param);
    gl_param_GLuint(sampler, -1);
    gl_param_GLenum(pname, -1); //TODO: The group
    if (pname == GL_TEXTURE_BORDER_COLOR)
        gl_param_GLuint_array(4, param);
    else
        gl_param_GLuint(*param, -1);

glGenFramebuffers:
    gl_param_GLsizei(n, -1);
    gl_glGenFramebuffers(n, framebuffers);
    gl_param_GLuint_array(n, framebuffers);

glDeleteFramebuffers:
    gl_param_GLsizei(n, -1);
    gl_param_GLuint_array(n, framebuffers);
    gl_glDeleteFramebuffers(n, framebuffers);

glGenRenderbuffers:
    gl_param_GLsizei(n, -1);
    gl_glGenRenderbuffers(n, renderbuffers);
    gl_param_GLuint_array(n, renderbuffers);

glDeleteRenderbuffers:
    gl_param_GLsizei(n, -1);
    gl_param_GLuint_array(n, renderbuffers);
    gl_glDeleteRenderbuffers(n, renderbuffers);

glGetActiveUniformsiv:
    gl_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
    gl_param_GLuint(program, -1);
    gl_param_GLsizei(uniformCount, -1);
    gl_param_GLuint_array(uniformCount, uniformIndices);
    gl_param_GLenum(pname, -1); //TODO: The group
    gl_param_GLint_array(uniformCount, params);

glGetFramebufferAttachmentParameteriv:
    gl_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
    gl_param_GLenum(target, -1); //TODO: The group
    gl_param_GLenum(attachment, -1); //TODO: The group
    gl_param_GLenum(pname, -1); //TODO: The group
    gl_param_GLint(*params, -1);

glGetRenderbufferParameteriv:
    gl_glGetRenderbufferParameteriv(target, pname, params);
    gl_param_GLenum(target, 1); //TODO: The group
    gl_param_GLenum(pname, -1); //TODO: The group
    gl_param_GLint(*params, -1);

glGenQueries:
    gl_param_GLsizei(n, -1);
    gl_glGenQueries(n, ids);
    gl_param_GLuint_array(n, ids);

glDeleteQueries:
    gl_param_GLsizei(n, -1);
    gl_param_GLuint_array(n, ids);
    gl_glDeleteQueries(n, ids);

glDrawBuffers:
    gl_param_GLsizei(n, -1);
    gl_param_GLuint_array(n, bufs);
    gl_glDrawBuffers(n, bufs);

glClearBufferiv:
    gl_param_GLenum(buffer, -1); //TODO: The group
    gl_param_GLint(drawbuffer, -1); //TODO: The group
    gl_param_GLint_array(buffer==GL_COLOR?4:1, value);

glClearBufferuiv:
    gl_param_GLenum(buffer, -1); //TODO: The group
    gl_param_GLint(drawbuffer, -1); //TODO: The group
    gl_param_GLuint_array(buffer==GL_COLOR?4:1, value);

glClearBufferfv:
    gl_param_GLenum(buffer, -1); //TODO: The group
    gl_param_GLint(drawbuffer, -1); //TODO: The group
    gl_param_GLfloat_array(buffer==GL_COLOR?4:1, value);
