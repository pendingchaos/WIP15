Debugging:
    Validation:
        Bindless handles
        Implementation defined/undefined behaviour
        Functions not allowed in current OpenGL profile/version
        Using extensions without explicitly enabling them
        Texture formats not natively supported on some GPUs
        Uninitialized uniforms
        Uninitialized textures
        Uninitialized buffers
        Unused uniforms
    Object viewing
        samplers
        queries
            timer
            occlusion
        sync objects
        program pipelines
    Shader debugger
        Can use SSBOs
        Possible without by rendering the values to the framebuffer
            Use this because it works on more hardware and driver combinations
    Backtraces with line numbers for function calls
        Would significantly increase size of traces
        Should disable by default
        May not implement in favor of debug markers
    Debug markers and stuff
    State inspection
        Currently have lots though more still needed.
        Some duplicated state (glGetBooleanv and glIsEnabled calls getting the same state)
    Replay should check to see if the user supplied limits have been reached.

Bugs:
    Program crashes with optimizations.
        Seems to be the glGetIntegerv calls in the state tracking code.
            Currently disabled.
    Handle stuff like this: https://github.com/apitrace/apitrace/issues/5#issuecomment-1025742
    The front buffer is not read correctly.
    The state, textures, etc will not be updated when opening a trace in the GUI.

Various TODOs in the source code.

Dramatically reduce memory usage and size of trace files.

Enum state values are not displayed as enums.

Cube map, 1D array, 2D array, rectangle, buffer and multisample textures.

Enabling or disabling state depending on OpenGL version and extensions.

glDel* should only flag the objects for deletion.

Control over the output trace filename in the GUI.

Control over the limits file in the GUI.
